{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create-Snapshot - scheduled job worker instance",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "SSHFrom" : {
      "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "WorkerInstanceType": {
      "Default": "t1.micro",
      "Description": "Worker EC2 instance type",
      "Type": "String",
      "AllowedValues": [
        "t1.micro",
        "m3.xlarge", "m3.2xlarge",
        "m1.small", "m1.medium", "m1.large", "m1.xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "c1.xlarge",
        "cc2.8xlarge",
        "m2.xlarge", "m2.2xlarge", "m2.4xlarge",
        "cr1.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "t1.micro",
        "g2.2xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "Recurrence" : {
      "Type" : "String",
      "Description" : "backup schedule. crontab style syntax. ex) 0 0 * * *",
      "Default" : "0 0 * * *"
    }
  },
  "Mappings": {
    "AWSAmazonLinuxAMI": {
      "us-east-1":      { "name":"Virginia",   "201303": "ami-3275ee5b", "201309": "ami-35792c5c" },
      "us-west-2":      { "name":"Oregon",     "201303": "ami-ecbe2adc", "201309": "ami-d03ea1e0" },
      "us-west-1":      { "name":"California", "201303": "ami-66d1fc23", "201309": "ami-687b4f2d" },
      "eu-west-1":      { "name":"Ireland",    "201303": "ami-44939930", "201309": "ami-149f7863" },
      "ap-southeast-1": { "name":"Singapole",  "201303": "ami-aa9ed2f8", "201309": "ami-14f2b946" },
      "ap-southeast-2": { "name":"Sydney",     "201303": "ami-363eaf0c", "201309": "ami-a148d59b" },
      "ap-northeast-1": { "name":"Tokyo",      "201303": "ami-173fbf16", "201309": "ami-3561fe34" },
      "sa-east-1":      { "name":"SaoPaulo",   "201303": "ami-dd6bb0c0", "201309": "ami-9f6ec982" }
    },
    "AZ": {
      "us-east-1":      { "primary": "us-east-1b",      "secondary": "us-east-1c" },
      "us-west-2":      { "primary": "us-west-2a",      "secondary": "us-west-2b" },
      "us-west-1":      { "primary": "us-west-1a",      "secondary": "us-west-1b" },
      "eu-west-1":      { "primary": "eu-west-1a",      "secondary": "eu-west-1b" },
      "ap-southeast-1": { "primary": "ap-southeast-1a", "secondary": "ap-southeast-1b" },
      "ap-southeast-2": { "primary": "ap-southeast-2a", "secondary": "ap-southeast-2b" },
      "ap-northeast-1": { "primary": "ap-northeast-1a", "secondary": "ap-northeast-1c" },
      "sa-east-1":      { "primary": "sa-east-1a",      "secondary": "sa-east-1b" }
    },
    "StackConfig" : {
      "VPC"               : { "CIDR" : "10.255.0.0/16" },
      "FrontendSubnet1"   : { "CIDR" : "10.255.0.0/24" },
      "FrontendSubnet2"   : { "CIDR" : "10.255.1.0/24" },
      "ApplicationSubnet1": { "CIDR" : "10.255.2.0/24" },
      "ApplicationSubnet2": { "CIDR" : "10.255.3.0/24" },
      "DatastoreSubnet1"  : { "CIDR" : "10.255.4.0/24" },
      "DatastoreSubnet2"  : { "CIDR" : "10.255.5.0/24" }
    }
  },
  "Resources": {

    "PowerUserRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement": [ {
            "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" :[ {
          "PolicyName" : "PowerUserPolicy",
          "PolicyDocument" : {
            "Statement": [ {
              "Sid": "PowerUserStmt",
              "Effect": "Allow",
              "NotAction": "iam:*",
              "Resource": "*"
            } ]
          }
        }]
      }
    },
    "PowerUserProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path": "/",
        "Roles" : [ { "Ref" : "PowerUserRole" } ]
      }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "StackConfig", "VPC", "CIDR" ]},
        "EnableDnsHostnames" : "true",
        "InstanceTenancy" : "default",
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "InternetGatewayId" : {"Ref" : "InternetGateway"}
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "FrontendSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone" : { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "primary" ]},
        "CidrBlock": { "Fn::FindInMap" : [ "StackConfig", "FrontendSubnet1", "CIDR" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "FrontendSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone" : { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "secondary" ]},
        "CidrBlock": { "Fn::FindInMap" : [ "StackConfig", "FrontendSubnet2", "CIDR" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "FrontendSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FrontendSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "FrontendSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FrontendSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "VPCDefaultSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Allow all communications in VPC"
      }
    },
    "VPCDefaultSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "VPCDefaultSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "VPCDefaultSecurityGroup" }
      }
    }, 
    "WorkerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable Web/SSH access from permitted location",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" }},
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Ref" : "SSHFrom" }}
        ]
      }
    },

    "LaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId": { "Fn::FindInMap": [ "AWSAmazonLinuxAMI", { "Ref": "AWS::Region" }, "201309" ]},
        "InstanceMonitoring" : false,
        "AssociatePublicIpAddress" : true,
        "InstanceType" : { "Ref" : "WorkerInstanceType" },
        "IamInstanceProfile" : { "Ref" : "PowerUserProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [
          { "Ref" : "WorkerSecurityGroup" },
          { "Ref" : "VPCDefaultSecurityGroup" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash -v\n",
          "","\n",
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",
          "","\n",
          "# Install packages\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r LaunchConfiguration ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",
          "","\n",
          "echo '/tmp/put_scale_schedule 2>&1 | logger ' | tee -a /etc/rc.local","\n",
          "echo '/tmp/create_snapshots 2>&1 | logger '   | tee -a /etc/rc.local","\n",
          "echo '/tmp/stop_myself 2>&1 | logger '        | tee -a /etc/rc.local","\n",
          "","\n",
          "","\n",
          "/opt/aws/bin/cfn-signal -e 0 '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "aws-cli" : ["1.2.6"],
                "jq" : []
              }
            },
            "files" : {
              "/tmp/put_scale_schedule" : {
                "content" : { "Fn::Join" : ["", [
                "#!/bin/sh","\n",
                "","\n",
                "export AWS_DEFAULT_REGION=",{ "Ref" : "AWS::Region" },"\n",
                "as_group=$(aws autoscaling describe-auto-scaling-groups | jq -r '.AutoScalingGroups[] | ","\n",
                "           select ( .Tags[].Key == \"aws:cloudformation:stack-name\" ","\n",
                "                and .Tags[].Value == \"", { "Ref" : "AWS::StackName" } ,"\" ) | ","\n",
                "           .AutoScalingGroupName ')","\n",
                "","\n",
                "aws autoscaling put-scheduled-update-group-action \\","\n",
                "    --auto-scaling-group-name $as_group \\","\n",
                "    --scheduled-action-name cm-create-snapshot \\","\n",
                "    --recurrence \"", { "Ref" : "Recurrence" } ,"\" \\","\n",
                "    --desired-capacity 1","\n"
                ]] },
                "mode"   : "000755",
                "owner"  : "root",
                "group"  : "root"
              },
              "/tmp/create_snapshots" : {
                "content" : { "Fn::Join" : ["", [
                "#!/bin/sh","\n",
                "#","\n",
                "export AWS_DEFAULT_REGION=",{ "Ref" : "AWS::Region" },"\n",
                "workdir=/tmp","\n",
                "mkdir -p $workdir","\n",
                "date_current=$(date +'%Y-%m-%d')","\n",
                "purge_after_days=7","\n",
                "","\n",
                "get_purge_after_date()","\n",
                "{","\n",
                "  case `uname` in","\n",
                "    Linux) echo `date -d +${purge_after_days}days -u +%Y-%m-%d` ;;","\n",
                "    Darwin) echo `date -v+${purge_after_days}d -u +%Y-%m-%d` ;;","\n",
                "    *) echo `date -d +${purge_after_days}days -u +%Y-%m-%d` ;;","\n",
                "  esac","\n",
                "}","\n",
                "","\n",
                "get_purge_after_date_epoch()","\n",
                "{","\n",
                "  case `uname` in","\n",
                "    Linux) echo `date -d $purge_after_date +%s` ;;","\n",
                "    Darwin) echo `date -j -f \"%Y-%m-%d\" $purge_after_date \"+%s\"` ;;","\n",
                "    *) echo `date -d $purge_after_date +%s` ;;","\n",
                "  esac","\n",
                "}","\n",
                "","\n",
                "get_date_current_epoch()","\n",
                "{","\n",
                "  case `uname` in","\n",
                "    Linux) echo `date -d $date_current +%s` ;;","\n",
                "    Darwin) echo `date -j -f \"%Y-%m-%d\" $date_current \"+%s\"` ;;","\n",
                "    *) echo `date -d $date_current +%s` ;;","\n",
                "  esac","\n",
                "}","\n",
                "","\n",
                "purgeafter=`get_purge_after_date`","\n",
                "","\n",
                "# backup volumes","\n",
                "aws ec2 describe-volumes > $workdir/describe-volumes.json","\n",
                "volumes=$(cat $workdir/describe-volumes.json | jq -r '.Volumes[].VolumeId')","\n",
                "for vol in $volumes; do","\n",
                "  echo \"checking backup flag of volume [$vol]\"","\n",
                "  backup=$(aws ec2 describe-tags \\","\n",
                "           --filters \"Name=resource-type,Values=volume\" \\","\n",
                "                     \"Name=resource-id,Values=$vol\" \\","\n",
                "                     \"Name=key,Values=Backup\" \\","\n",
                "           --query \"Tags[*].Value\" --output text)","\n",
                "  if [ \"$backup\" == \"true\" ]; then","\n",
                "    instance_id=$(cat $workdir/describe-volumes.json | jq -r '.Volumes[] | select(.VolumeId == \"'$vol'\") | .Attachments[].InstanceId')","\n",
                "    echo \"backup volume [$vol] attached to ${instance_id}\"","\n",
                "    aws ec2 create-snapshot --volume-id $vol --description \"ec2ab_${vol}_${date_current} (${instance_id})\" > $workdir/create-snapshot-result.json","\n",
                "    snapshotid=$(cat $workdir/create-snapshot-result.json | jq -r \".SnapshotId\")","\n",
                "    aws ec2 create-tags --resources $snapshotid --tags Key=PurgeAllow,Value=true > $workdir/create-tags-purgeallow.json","\n",
                "    aws ec2 create-tags --resources $snapshotid --tags Key=PurgeAfter,Value=$purgeafter > $workdir/create-tags-purgeafter.json","\n",
                "  fi","\n",
                "done","\n",
                "","\n",
                "","\n",
                "# purge old snapshot","\n",
                "aws ec2 describe-tags --filters \"Name=resource-type,Values=snapshot\" --filter \"Name=key,Values=PurgeAllow,PurgeAfter\" > $workdir/describe-tags.json","\n",
                "snapshot_purge_allowed=$(cat $workdir/describe-tags.json | jq -r '.Tags[] | select(.Key == \"PurgeAllow\" and .Value == \"true\") | .ResourceId')","\n",
                "for snapshot_id in $snapshot_purge_allowed; do","\n",
                "  purge_after_date=$(cat $workdir/describe-tags.json | jq -r '.Tags[] ","\n",
                "                     | select(.ResourceId == \"'$snapshot_id'\" and .Key == \"PurgeAfter\") ","\n",
                "                     | .Value')","\n",
                "  echo \"checking snapshot PurgeAfter date is before current [${snapshot_id} / ${purge_after_date}]\"","\n",
                "  if [ -n $purge_after_date ]; then","\n",
                "    date_current_epoch=`get_date_current_epoch`","\n",
                "    purge_after_date_epoch=`get_purge_after_date_epoch`","\n",
                "    if [[ $purge_after_date_epoch < $date_current_epoch ]]; then","\n",
                "      echo \"The snapshot ${snapshot_id} with the Purge After date of $purge_after_date will be deleted.\"","\n",
                "      aws ec2 delete-snapshot --snapshot-id $snapshot_id","\n",
                "    fi","\n",
                "  fi","\n",
                "done","\n"
                ]] },
                "mode"   : "000755",
                "owner"  : "root",
                "group"  : "root"
              },
              "/tmp/stop_myself" : {
                "content" : { "Fn::Join" : ["", [
                "#!/bin/sh","\n",
                "","\n",
                "export AWS_DEFAULT_REGION=",{ "Ref" : "AWS::Region" },"\n",
                "as_group=$(aws autoscaling describe-auto-scaling-groups | jq -r '.AutoScalingGroups[] | ","\n",
                "           select ( .Tags[].Key == \"aws:cloudformation:stack-name\" ","\n",
                "                and .Tags[].Value == \"", { "Ref" : "AWS::StackName" } ,"\" ) | ","\n",
                "           .AutoScalingGroupName ')","\n",
                "","\n",
                "aws autoscaling set-desired-capacity  --auto-scaling-group-name ${as_group} --desired-capacity 0","\n"
                ]] },
                "mode"   : "000755",
                "owner"  : "root",
                "group"  : "root"
              }
            }
          }
        }
      }
    },

    "AutoScalingGroupServers" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : { "Ref" : "AWS::Region" } },
        "DesiredCapacity" : "1",
        "HealthCheckGracePeriod" : "300",
        "HealthCheckType" : "EC2",
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "MinSize" : "0",
        "MaxSize" : "1",
        "VPCZoneIdentifier" : [
          { "Ref" : "FrontendSubnet1" },
          { "Ref" : "FrontendSubnet2" }
        ],
        "Tags": [
          { "Key": "Name", "Value": "JobWorker", "PropagateAtLaunch" : "true" }
        ]
      }
    },
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "AutoScalingGroupServers",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "3600"
      }
    }
  }
}
